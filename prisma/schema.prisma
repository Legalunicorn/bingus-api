generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  displayName    String        @map("display_name")
  username       String?       @unique
  email          String?       @unique
  googleId       String?       @unique @map("google_id")
  hashedPassword String?       @map("hashed_password")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  setUsername    Boolean       @default(true)
  commentLikes   CommentLike[]
  comments       Comment[]
  following      Follow[]      @relation("UserFollowing")
  followers      Follow[]      @relation("UserFollowers")
  // receivedMessages Message[]     @relation("receivedMessages")
  sentMessages   Message[]     @relation("sentMessages")
  //I dont intend to allow group chats, only DM so userA userB is succicient, dont need a seperate table
  userA          Chat[]        @relation("userA")
  userB          Chat[]        @relation("userB")
  posts          Post[]
  postLikes      PostLike[]
  profile        Profile?
  setting        UserSetting?

  @@map("user")
}

model Chat {
  id      Int       @id @default(autoincrement())
  userA   User      @relation("userA", fields: [userAId], references: [id], onDelete: Cascade)
  userAId Int
  userB   User      @relation("userB", fields: [userBId], references: [id], onDelete: Cascade)
  userBId Int
  message Message[]
  lastMessageAt DateTime @default(now())

  @@unique([userAId, userBId])
  @@map("chat")
}

model Profile {
  id             Int      @id @default(autoincrement())
  bio            String   @default("")
  profilePicture String?
  pfp_public_id  String?
  website        String?
  github         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model UserSetting {
  id         Int     @id @default(autoincrement())
  isDarkMode Boolean @default(true)
  userId     Int     @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_setting")
}

model Post {
  id         Int        @id @default(autoincrement())
  body       String     @default("")
  gitLink    String?
  repoLink   String?
  attachment String?
  public_id  String?
  createdAt  DateTime   @default(now())
  nextPostId Int?
  userId     Int
  comments   Comment[]
  nextPost   Post?      @relation("PostSequal", fields: [nextPostId], references: [id])
  prevPost   Post[]     @relation("PostSequal")
  author     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes      PostLike[]
  tags       Tag[]      @relation("PostToTag")

  @@map("post")
}

model Comment {
  id              Int           @id @default(autoincrement())
  body            String
  createdAt       DateTime      @default(now())
  userId          Int
  parentCommentId Int?
  postId          Int
  likes           CommentLike[]
  parentComment   Comment?      @relation("CommentParent", fields: [parentCommentId], references: [id], onDelete: Cascade)
  childComment    Comment[]     @relation("CommentParent")
  post            Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostLike {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  userId    Int
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostToTag")

  @@map("tag")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  senderId  Int
  // receiverId Int
  // receiver   User     @relation("receivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender    User     @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  chatId    Int
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@map("message")
}

model Follow {
  followingId Int
  followerId  Int
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId], name: "id")
  @@map("follow")
}
